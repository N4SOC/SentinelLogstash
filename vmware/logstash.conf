input {
  udp {
    port => 514
    type => syslog
    codec => plain {
      charset => "ISO-8859-1"
    }
  }
}
filter { 
 mutate {
        add_tag => [ "<environment_name>" ]
      }

if "Rhttpproxy" in [message] or  "hostd-probe: quiet" in [message] {
  drop { }
}
    grok {
      break_on_match => false
      match => [
        "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) \[%{DATA:message_service_info}]\ (?<message-syslog>(%{GREEDYDATA})))",
        "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) (?<message-syslog>(%{GREEDYDATA})))",
        "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: %{GREEDYDATA:message-syslog}"
      ]
    }
syslog_pri { }
  mutate {
    rename => [ "host", "syslog_source-IP" ]
    rename => [ "hostname", "syslog_source-hostname" ]
    rename => [ "message", "message-raw" ]
    rename => [ "program", "message_program" ]
    rename => [ "message_vce_server", "syslog_source-hostname" ]
    remove_field => [ "@version", "type", "path" ]
  }
}
output {
  microsoft-logstash-output-azure-loganalytics {
    workspace_id => "<workspaceID>"
    workspace_key => "<workspaceKey>"
    custom_log_table_name => "vmware"
  }
}